{"ast":null,"code":"var _jsxFileName = \"/home/vboxuser/apps-dev/myweather-app3/frontend-server/src/App.js\",\n  _s = $RefreshSig$();\n// filepath: /home/vboxuser/apps-dev/myweather-app3/myweather-app/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport Search from './components/search/search.js';\nimport Forecast from './components/forecast/forecast.js';\nimport CurrentWeather from './components/current-weather/current-weather.js';\nimport WeatherNews from './components/WeatherNews/WeatherNews.js';\nimport WeatherGraph from './components/WeatherGraph/WeatherGraph.js';\nimport fetchAndSummarizeWeatherNews from './services/gemini-service.js';\nimport { REACT_APP_WEATHER_API_URL, REACT_APP_WEATHER_API_KEY } from './api.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Existing state variables\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [weatherNewsSummary, setWeatherNewsSummary] = useState(null);\n  const [flagUrl, setFlagUrl] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState([]);\n\n  // --- New State Variable ---\n  // State to track if data is currently being fetched\n  const [isLoading, setIsLoading] = useState(false);\n  // Optional: State to specifically track errors\n  const [error, setError] = useState(null);\n  const handleOnSearchChange = searchData => {\n    // --- Start Loading ---\n    setIsLoading(true);\n    setError(null); // Clear previous errors\n    // Clear previous data immediately for better UX\n    setCurrentWeather(null);\n    setForecast(null);\n    setHourlyForecast([]);\n    setFlagUrl(null);\n    setWeatherNewsSummary(null);\n    const [lat, lon] = searchData.value.split(\" \");\n    const CurrentWeatherFetch = fetch(`${REACT_APP_WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&units=metric&appid=${REACT_APP_WEATHER_API_KEY}`);\n    const ForecastWeatherFetch = fetch(`${REACT_APP_WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${REACT_APP_WEATHER_API_KEY}`);\n    Promise.all([CurrentWeatherFetch, ForecastWeatherFetch]).then(async response => {\n      var _weatherResponse$sys;\n      // Check if BOTH responses are ok\n      if (!response[0].ok || !response[1].ok) {\n        // Try to get error details if available\n        let errorMsg = \"Failed to fetch weather data\";\n        try {\n          if (!response[0].ok) errorMsg = `Weather API Error: ${response[0].status} ${await response[0].text()}`;else if (!response[1].ok) errorMsg = `Forecast API Error: ${response[1].status} ${await response[1].text()}`;\n        } catch (_) {/* Ignore parsing errors */}\n        throw new Error(errorMsg); // Throw error to be caught by .catch\n      }\n      const weatherResponse = await response[0].json();\n      const forecastResponse = await response[1].json();\n\n      // Update weather and forecast state\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forecastResponse\n      });\n\n      // Filter hourly forecast data for today\n      const today = new Date().toISOString().split(\"T\")[0];\n      const hourlyData = forecastResponse.list.filter(entry => entry.dt_txt.startsWith(today));\n      setHourlyForecast(hourlyData);\n\n      // Fetch the flag URL\n      const countryCode = ((_weatherResponse$sys = weatherResponse.sys) === null || _weatherResponse$sys === void 0 ? void 0 : _weatherResponse$sys.country) || \"unknown\";\n      const flagUrl = `https://flagcdn.com/w320/${countryCode.toLowerCase()}.png`;\n      setFlagUrl(flagUrl);\n\n      // Fetch and summarize weather news using Google Gemini (can run concurrently or after)\n      // Using await here makes it sequential after weather/forecast are processed\n      try {\n        const newsSummary = await fetchAndSummarizeWeatherNews(searchData.label);\n        setWeatherNewsSummary(newsSummary); // Update news summary state\n      } catch (newsError) {\n        console.error(\"Error fetching weather news summary:\", newsError.message);\n        // Set specific error for news, or append to general error\n        setWeatherNewsSummary(\"Unable to fetch weather news summary.\");\n        // Optionally set the main error state too: setError(\"Weather data loaded, but news failed.\");\n      }\n    }).catch(err => {\n      console.error(\"Error during data fetching:\", err);\n      // --- Set Error State ---\n      // Set a user-friendly error message\n      setError(`Error: ${err.message || \"Could not fetch data. Please check your connection or API keys.\"}`);\n      // Ensure all data states are cleared (might be redundant if cleared at start, but safe)\n      setCurrentWeather(null);\n      setForecast(null);\n      setHourlyForecast([]);\n      setFlagUrl(null);\n      setWeatherNewsSummary(null);\n    }).finally(() => {\n      // --- Stop Loading ---\n      // This runs regardless of success or failure\n      setIsLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-indicator\",\n      children: \"Loading weather data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, this), !isLoading && !error && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-container\",\n        children: [currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          flagUrl: flagUrl,\n          data: currentWeather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 32\n        }, this), weatherNewsSummary && /*#__PURE__*/_jsxDEV(WeatherNews, {\n          summary: weatherNewsSummary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 36\n        }, this), hourlyForecast.length > 0 && /*#__PURE__*/_jsxDEV(WeatherGraph, {\n          data: hourlyForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n        data: forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WPuatqitMgdDj6itsUCg2IbkVSE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Search","Forecast","CurrentWeather","WeatherNews","WeatherGraph","fetchAndSummarizeWeatherNews","REACT_APP_WEATHER_API_URL","REACT_APP_WEATHER_API_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","weatherNewsSummary","setWeatherNewsSummary","flagUrl","setFlagUrl","hourlyForecast","setHourlyForecast","isLoading","setIsLoading","error","setError","handleOnSearchChange","searchData","lat","lon","value","split","CurrentWeatherFetch","fetch","ForecastWeatherFetch","Promise","all","then","response","_weatherResponse$sys","ok","errorMsg","status","text","_","Error","weatherResponse","json","forecastResponse","city","label","today","Date","toISOString","hourlyData","list","filter","entry","dt_txt","startsWith","countryCode","sys","country","toLowerCase","newsSummary","newsError","console","message","catch","err","finally","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","data","summary","length","_c","$RefreshReg$"],"sources":["/home/vboxuser/apps-dev/myweather-app3/frontend-server/src/App.js"],"sourcesContent":["// filepath: /home/vboxuser/apps-dev/myweather-app3/myweather-app/src/App.js\nimport React, { useState } from 'react';\nimport './App.css';\nimport Search from './components/search/search.js';\nimport Forecast from './components/forecast/forecast.js';\nimport CurrentWeather from './components/current-weather/current-weather.js';\nimport WeatherNews from './components/WeatherNews/WeatherNews.js';\nimport WeatherGraph from './components/WeatherGraph/WeatherGraph.js';\nimport fetchAndSummarizeWeatherNews from './services/gemini-service.js';\nimport { REACT_APP_WEATHER_API_URL, REACT_APP_WEATHER_API_KEY } from './api.js';\n\nfunction App() {\n  // Existing state variables\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [weatherNewsSummary, setWeatherNewsSummary] = useState(null);\n  const [flagUrl, setFlagUrl] = useState(null);\n  const [hourlyForecast, setHourlyForecast] = useState([]);\n\n  // --- New State Variable ---\n  // State to track if data is currently being fetched\n  const [isLoading, setIsLoading] = useState(false);\n  // Optional: State to specifically track errors\n  const [error, setError] = useState(null);\n\n  const handleOnSearchChange = (searchData) => {\n    // --- Start Loading ---\n    setIsLoading(true);\n    setError(null); // Clear previous errors\n    // Clear previous data immediately for better UX\n    setCurrentWeather(null);\n    setForecast(null);\n    setHourlyForecast([]);\n    setFlagUrl(null);\n    setWeatherNewsSummary(null);\n\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const CurrentWeatherFetch = fetch(\n      `${REACT_APP_WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&units=metric&appid=${REACT_APP_WEATHER_API_KEY}`\n    );\n\n    const ForecastWeatherFetch = fetch(\n      `${REACT_APP_WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${REACT_APP_WEATHER_API_KEY}`\n    );\n\n    Promise.all([CurrentWeatherFetch, ForecastWeatherFetch])\n      .then(async (response) => {\n        // Check if BOTH responses are ok\n        if (!response[0].ok || !response[1].ok) {\n          // Try to get error details if available\n          let errorMsg = \"Failed to fetch weather data\";\n          try {\n             if (!response[0].ok) errorMsg = `Weather API Error: ${response[0].status} ${await response[0].text()}`;\n             else if (!response[1].ok) errorMsg = `Forecast API Error: ${response[1].status} ${await response[1].text()}`;\n          } catch (_) { /* Ignore parsing errors */ }\n          throw new Error(errorMsg); // Throw error to be caught by .catch\n        }\n\n        const weatherResponse = await response[0].json();\n        const forecastResponse = await response[1].json();\n\n        // Update weather and forecast state\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forecastResponse });\n\n        // Filter hourly forecast data for today\n        const today = new Date().toISOString().split(\"T\")[0];\n        const hourlyData = forecastResponse.list.filter((entry) =>\n          entry.dt_txt.startsWith(today)\n        );\n        setHourlyForecast(hourlyData);\n\n        // Fetch the flag URL\n        const countryCode = weatherResponse.sys?.country || \"unknown\";\n        const flagUrl = `https://flagcdn.com/w320/${countryCode.toLowerCase()}.png`;\n        setFlagUrl(flagUrl);\n\n        // Fetch and summarize weather news using Google Gemini (can run concurrently or after)\n        // Using await here makes it sequential after weather/forecast are processed\n        try {\n          const newsSummary = await fetchAndSummarizeWeatherNews(searchData.label);\n          setWeatherNewsSummary(newsSummary); // Update news summary state\n        } catch (newsError) {\n          console.error(\"Error fetching weather news summary:\", newsError.message);\n          // Set specific error for news, or append to general error\n          setWeatherNewsSummary(\"Unable to fetch weather news summary.\");\n          // Optionally set the main error state too: setError(\"Weather data loaded, but news failed.\");\n        }\n      })\n      .catch((err) => {\n        console.error(\"Error during data fetching:\", err);\n        // --- Set Error State ---\n        // Set a user-friendly error message\n        setError(`Error: ${err.message || \"Could not fetch data. Please check your connection or API keys.\"}`);\n        // Ensure all data states are cleared (might be redundant if cleared at start, but safe)\n        setCurrentWeather(null);\n        setForecast(null);\n        setHourlyForecast([]);\n        setFlagUrl(null);\n        setWeatherNewsSummary(null);\n      })\n      .finally(() => {\n        // --- Stop Loading ---\n        // This runs regardless of success or failure\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* Search component always visible */}\n      <Search onSearchChange={handleOnSearchChange} />\n\n      {/* --- Loading Indicator --- */}\n      {isLoading && <div className=\"loading-indicator\">Loading weather data...</div>}\n\n      {/* --- Error Display --- */}\n      {error && <div className=\"error-message\">{error}</div>}\n\n      {/* --- Main Content Area (Render only when not loading and no error) --- */}\n      {!isLoading && !error && (\n        <> {/* Fragment to group multiple elements */}\n          <div className=\"main-container\">\n            {/* Conditionally render components based on available data */}\n            {currentWeather && <CurrentWeather flagUrl={flagUrl} data={currentWeather} />}\n            {/* Display news summary if available (even if there was a news-specific error message set) */}\n            {weatherNewsSummary && <WeatherNews summary={weatherNewsSummary} />}\n            {hourlyForecast.length > 0 && <WeatherGraph data={hourlyForecast} />}\n          </div>\n          {/* Render forecast if available */}\n          {forecast && <Forecast data={forecast} />}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}