{"ast":null,"code":"// src/option_result.ts\nfunction Ok(result) {\n  const self = {\n    isOk: () => true,\n    isOkAnd: fn => fn(result),\n    isErr: () => false,\n    isErrAnd: () => false,\n    ok: () => Some(result),\n    err: () => None(),\n    map: fn => Ok(fn(result)),\n    mapOr: (_, fn) => fn(result),\n    mapOrElse: (_, fn) => fn(result),\n    mapErr: () => Ok(result),\n    expect: () => result,\n    expectErr: msg => {\n      throw new Error(msg);\n    },\n    unwrap: () => result,\n    unwrapErr: () => {\n      throw new Error(`${result}`);\n    },\n    unwrapOr: () => result,\n    unwrapOrElse: () => result,\n    and: res => res,\n    andThen: getRes => getRes(result),\n    or: () => Ok(result),\n    orElse: () => Ok(result)\n  };\n  return self;\n}\nfunction Err(err) {\n  const self = {\n    isOk: () => false,\n    isOkAnd: () => false,\n    isErr: () => true,\n    isErrAnd: fn => fn(err),\n    ok: () => None(),\n    err: () => Some(err),\n    map: () => Err(err),\n    mapOr: defaultValue => defaultValue,\n    mapOrElse: getDefaultValue => getDefaultValue(err),\n    mapErr: fn => Err(fn(err)),\n    expect: msg => {\n      throw new Error(msg);\n    },\n    expectErr: () => err,\n    unwrap: () => {\n      throw new Error(`${err}`);\n    },\n    unwrapErr: () => err,\n    unwrapOr: defaultValue => defaultValue,\n    unwrapOrElse: getDefaultValue => getDefaultValue(err),\n    and: () => Err(err),\n    andThen: () => Err(err),\n    or: res => res,\n    orElse: getRes => getRes(err)\n  };\n  return self;\n}\nfunction None() {\n  const self = {\n    and: () => None(),\n    andThen: () => None(),\n    expect: msg => {\n      throw new Error(msg);\n    },\n    filter: () => self,\n    isSome: () => false,\n    isSomeAnd: () => false,\n    isNone: () => true,\n    map: () => None(),\n    mapOr: defaultValue => defaultValue,\n    mapOrElse: getDefaultValue => getDefaultValue(),\n    okOr: err => Err(err),\n    okOrElse: getErr => Err(getErr()),\n    or: opt => opt,\n    orElse: fn => fn(),\n    unwrap: () => {\n      throw new Error(\"panic! call `unwrap` on a `None` value\");\n    },\n    unwrapOr: defaultValue => defaultValue,\n    unwrapOrElse: getDefaultValue => getDefaultValue(),\n    xor: opt => {\n      if (opt.isSome()) {\n        return opt;\n      }\n      return self;\n    }\n  };\n  return self;\n}\nfunction Some(value) {\n  const self = {\n    and: opt => opt,\n    andThen: fn => fn(value),\n    expect: () => value,\n    filter: fn => {\n      if (fn(value)) {\n        return self;\n      }\n      return None();\n    },\n    isSome: () => true,\n    isSomeAnd: fn => fn(value),\n    isNone: () => false,\n    map: fn => Some(fn(value)),\n    mapOr: (_, fn) => fn(value),\n    mapOrElse: (_, fn) => fn(value),\n    okOr: () => Ok(value),\n    okOrElse: () => Ok(value),\n    or: () => self,\n    orElse: () => self,\n    unwrap: () => value,\n    unwrapOr: () => value,\n    unwrapOrElse: () => value,\n    xor: opt => {\n      if (opt.isNone()) {\n        return self;\n      }\n      return None();\n    }\n  };\n  return self;\n}\n\n// src/to_option.ts\nfunction toOption(arg) {\n  if (arg === null || arg === void 0) {\n    return None();\n  }\n  return Some(arg);\n}\n\n// src/get_result.ts\nfunction getResult(promise) {\n  return promise.then(response => Ok(response), err => Err(err));\n}\n\n// src/unwrap.ts\nfunction unwrap(value) {\n  if (value === null || value === void 0) {\n    throw new Error(`panic! call \\`unwrap\\` on a \\`${value}\\` value`);\n  }\n  return value;\n}\n\n// src/unwrap_or.ts\nfunction unwrapOr(value, defaultValue) {\n  if (value === null || value === void 0) {\n    return defaultValue;\n  }\n  return value;\n}\n\n// src/unwrap_or_else.ts\nfunction unwrapOrElse(value, getDefaultValue) {\n  if (value === null || value === void 0) {\n    return getDefaultValue();\n  }\n  return value;\n}\n\n// src/try_catch.ts\nfunction tryCatch(fn) {\n  let result;\n  try {\n    result = fn();\n  } catch (e) {\n    return Err(e);\n  }\n  return Ok(result);\n}\nexport { Err, None, Ok, Some, getResult, toOption, tryCatch, unwrap, unwrapOr, unwrapOrElse };","map":null,"metadata":{},"sourceType":"module"}