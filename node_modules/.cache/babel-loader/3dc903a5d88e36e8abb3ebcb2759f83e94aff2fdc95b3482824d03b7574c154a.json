{"ast":null,"code":"var _jsxFileName = \"/home/vboxuser/apps-dev/myweather-app/src/components/WeatherGraph/WeatherGraph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './WeatherGraph.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherGraph = ({\n  data\n}) => {\n  // Generate an array of all hours from 12 AM to 12 PM\n  const hours = Array.from({\n    length: 13\n  }, (_, i) => i); // [0, 1, 2, ..., 12]\n\n  // Map the data to ensure all hours are included\n  const hourlyData = hours.map(hour => {\n    // Find the entry for the current hour\n    const entry = data.find(item => {\n      const time = item.dt_txt.split(\" \")[1]; // Extract time (HH:MM:SS)\n      const entryHour = parseInt(time.split(\":\")[0], 10); // Extract the hour\n      return entryHour === hour;\n    });\n\n    // If an entry exists for the hour, return it; otherwise, return a placeholder\n    return entry ? {\n      time: entry.dt_txt.split(\" \")[1],\n      temp: entry.main.temp\n    } : {\n      time: `${hour.toString().padStart(2, \"0\")}:00:00`,\n      temp: null\n    }; // Placeholder for missing data\n  });\n  const chartData = {\n    labels: hourlyData.map(entry => entry.time.split(\":\").slice(0, 2).join(\":\")),\n    // Format time as HH:MM\n    datasets: [{\n      label: 'Temperature (째C)',\n      data: hourlyData.map(entry => entry.temp),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      borderWidth: 2,\n      tension: 0.4,\n      spanGaps: true // Allow gaps in the graph for missing data\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top'\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Temperature (째C)'\n        },\n        beginAtZero: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-graph-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"weather-graph-title\",\n      children: \"12 AM to 12 PM Temperature Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = WeatherGraph;\nexport default WeatherGraph;\nvar _c;\n$RefreshReg$(_c, \"WeatherGraph\");","map":{"version":3,"names":["React","Line","jsxDEV","_jsxDEV","WeatherGraph","data","hours","Array","from","length","_","i","hourlyData","map","hour","entry","find","item","time","dt_txt","split","entryHour","parseInt","temp","main","toString","padStart","chartData","labels","slice","join","datasets","label","borderColor","backgroundColor","borderWidth","tension","spanGaps","options","responsive","plugins","legend","display","position","scales","x","title","text","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/vboxuser/apps-dev/myweather-app/src/components/WeatherGraph/WeatherGraph.js"],"sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport './WeatherGraph.css'; // Import the CSS file\n\nconst WeatherGraph = ({ data }) => {\n  // Generate an array of all hours from 12 AM to 12 PM\n  const hours = Array.from({ length: 13 }, (_, i) => i); // [0, 1, 2, ..., 12]\n\n  // Map the data to ensure all hours are included\n  const hourlyData = hours.map((hour) => {\n    // Find the entry for the current hour\n    const entry = data.find((item) => {\n      const time = item.dt_txt.split(\" \")[1]; // Extract time (HH:MM:SS)\n      const entryHour = parseInt(time.split(\":\")[0], 10); // Extract the hour\n      return entryHour === hour;\n    });\n\n    // If an entry exists for the hour, return it; otherwise, return a placeholder\n    return entry\n      ? { time: entry.dt_txt.split(\" \")[1], temp: entry.main.temp }\n      : { time: `${hour.toString().padStart(2, \"0\")}:00:00`, temp: null }; // Placeholder for missing data\n  });\n\n  const chartData = {\n    labels: hourlyData.map((entry) => entry.time.split(\":\").slice(0, 2).join(\":\")), // Format time as HH:MM\n    datasets: [\n      {\n        label: 'Temperature (째C)',\n        data: hourlyData.map((entry) => entry.temp),\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderWidth: 2,\n        tension: 0.4,\n        spanGaps: true, // Allow gaps in the graph for missing data\n      },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top',\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Time',\n        },\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Temperature (째C)',\n        },\n        beginAtZero: false,\n      },\n    },\n  };\n\n  return (\n    <div className=\"weather-graph-container\">\n      <h3 className=\"weather-graph-title\">12 AM to 12 PM Temperature Forecast</h3>\n      <Line data={chartData} options={options} />\n    </div>\n  );\n};\n\nexport default WeatherGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}