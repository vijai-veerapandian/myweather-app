{"ast":null,"code":"import { OPENAI_API_URL, openAiApiOptions } from '../api';\nconst fetchQuote = async city => {\n  try {\n    console.log('Using OpenAI API to fetch quote for city:', city);\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: openAiApiOptions.headers,\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        // Specify the correct model\n        messages: [{\n          role: 'system',\n          content: 'You are a helpful assistant that provides inspiring quotes.'\n        }, {\n          role: 'user',\n          content: `Provide an inspiring quote from a famous person born in ${city}.`\n        }],\n        max_tokens: 100 // Limit the response length\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch quote for city: ${city}. Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.choices[0].message.content.trim(); // Return the generated quote\n  } catch (error) {\n    console.error('Error fetching quote from OpenAI:', error.message);\n    return null; // Return null if there's an error\n  }\n};\nexport default fetchQuote;","map":{"version":3,"names":["OPENAI_API_URL","openAiApiOptions","fetchQuote","city","console","log","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","max_tokens","ok","Error","status","data","json","choices","message","trim","error"],"sources":["/home/vboxuser/apps-dev/myweather-app/src/quotes-service/quote-service.js"],"sourcesContent":["import { OPENAI_API_URL, openAiApiOptions } from '../api';\n\nconst fetchQuote = async (city) => {\n  try {\n    console.log('Using OpenAI API to fetch quote for city:', city);\n\n    const response = await fetch(OPENAI_API_URL, {\n      method: 'POST',\n      headers: openAiApiOptions.headers,\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo', // Specify the correct model\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a helpful assistant that provides inspiring quotes.',\n          },\n          {\n            role: 'user',\n            content: `Provide an inspiring quote from a famous person born in ${city}.`,\n          },\n        ],\n        max_tokens: 100, // Limit the response length\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch quote for city: ${city}. Status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.choices[0].message.content.trim(); // Return the generated quote\n  } catch (error) {\n    console.error('Error fetching quote from OpenAI:', error.message);\n    return null; // Return null if there's an error\n  }\n};\n\nexport default fetchQuote;"],"mappings":"AAAA,SAASA,cAAc,EAAEC,gBAAgB,QAAQ,QAAQ;AAEzD,MAAMC,UAAU,GAAG,MAAOC,IAAI,IAAK;EACjC,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEF,IAAI,CAAC;IAE9D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,cAAc,EAAE;MAC3CQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAER,gBAAgB,CAACQ,OAAO;MACjCC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,eAAe;QAAE;QACxBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAE;QACX,CAAC,EACD;UACED,IAAI,EAAE,MAAM;UACZC,OAAO,EAAE,2DAA2Db,IAAI;QAC1E,CAAC,CACF;QACDc,UAAU,EAAE,GAAG,CAAE;MACnB,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACY,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmChB,IAAI,aAAaG,QAAQ,CAACc,MAAM,EAAE,CAAC;IACxF;IAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACgB,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACR,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdtB,OAAO,CAACsB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAACF,OAAO,CAAC;IACjE,OAAO,IAAI,CAAC,CAAC;EACf;AACF,CAAC;AAED,eAAetB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}